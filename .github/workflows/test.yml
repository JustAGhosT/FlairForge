name: FlairForge Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Frontend Tests
  frontend-unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          directory: ./coverage
          flags: frontend-unit
          name: frontend-unit-coverage

  frontend-e2e:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Backend Tests
  backend-unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          directory: ./coverage
          flags: backend-unit
          name: backend-unit-coverage

  backend-integration:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    env:
      BASE_URL: https://flairforge.netlify.app
      TEST_BASE_URL: ${{ secrets.TEST_BASE_URL }}
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Set BASE_URL from secret if present
        run: |
          if [ -n "$TEST_BASE_URL" ]; then
            echo "BASE_URL=$TEST_BASE_URL" >> $GITHUB_ENV
          fi

      - name: Run performance tests
        run: npm run test:performance
        env:
          BASE_URL: ${{ env.BASE_URL }}

  # Security Tests
  security:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run security scan
        run: npm run test:security-scan

  # Build Verification
  build-verification:
    runs-on: ubuntu-latest
    needs: [frontend-unit, backend-unit]
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build output directory not found"
            exit 1
          fi
          echo "Build verification passed"

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs:
      [
        frontend-unit,
        frontend-e2e,
        backend-unit,
        backend-integration,
        performance,
        security,
        build-verification,
      ]
    if: always()

    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.frontend-unit.result }}" == "success" ]; then
            echo "| Frontend Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.frontend-e2e.result }}" == "success" ]; then
            echo "| Frontend E2E Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend E2E Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.backend-unit.result }}" == "success" ]; then
            echo "| Backend Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.backend-integration.result }}" == "success" ]; then
            echo "| Backend Integration Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend Integration Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance.result }}" == "success" ]; then
            echo "| Performance Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Performance Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "| Security Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Security Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-verification.result }}" == "success" ]; then
            echo "| Build Verification | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build Verification | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
